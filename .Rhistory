#Collpase some of the categories by giving them the same factor label
levels(adult$marital.status); levels(adult$workclass)
levels(adult$marital.status)[2:4]<-"Married"
levels(adult$workclass)[c(2,3,8)]<-"Gov"
levels(adult$workclass)[c(5,6)]<-"Self"
levels(adult$marital.status);levels(adult$workclass)
#Standardize the numeric variables
adult$age.z <- (adult$age-mean(adult$age))/sd(adult$age)
adult$education.num.z <- (adult$education.num-mean(adult$education.num))/sd(adult$education.num)
adult$capital.gain.z <- (adult$capital.gain-mean(adult$capital.gain))/sd(adult$capital.gain)
adult$capital.loss.z <- (adult$capital.loss-mean(adult$capital.loss))/sd(adult$capital.loss)
adult$hours.per.week.z <- (adult$hours.per.week-mean(adult$hours.per.week))/sd(adult$hours.per.week)
#Use predictors to classify whether or not a person's income is less than $50k
library("rpart")
cartfit<-rpart(income ~ age.z+education.num.z+capital.gain.z+capital.loss.z+hours.per.week.z+
race+sex+workclass+marital.status,data=adult,method="class")
print(cartfit)
library("rpart.plot")
rpart.plot(cartfit,main="Classification Tree")
library("C50")
names(adult)
x<-adult[,c(2,6,9,10,16,17,18,19,20)]
y<- adult$income
c50fit1 <- C5.0(x,y)
summary(c50fit1)
c50fit2 <- C5.0(x,y,control=C5.0Control(CF=.1))
summary(c50fit2)
install.packages("C50")
library("C50")
names(adult)
x<-adult[,c(2,6,9,10,16,17,18,19,20)]
y<- adult$income
c50fit1 <- C5.0(x,y)
summary(c50fit1)
c50fit2 <- C5.0(x,y,control=C5.0Control(CF=.1))
summary(c50fit2)
rpart.plot(cartfit,main="Classification Tree")
print(cartfit)
View(adult)
View(adult)
View(adult)
View(adult)
str(adult)
summary(cartfit)
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
#Create indicator variables
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <-
adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <-
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
for (i in 1:length(adult$income)) {
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
if (adult$sex[i]=="Male") adult$sex2[i]<-1
if (adult$race[i]=="White") adult$race_white[i] <- 1
if (adult$race[i]=="Amer-Indian-Eskimo") adult$race_am.in.esk[i]<-1
if (adult$race[i]=="Asian-Pac-Islander") adult$race_ac.pac.is[i] <-1
if(adult$race[i]=="Black") adult$race_black[i] <- 1
if(adult$workclass[i]=="Gov") adult$wc_gov[i] <- 1
if(adult$workclass[i]=="Self") adult$wc_self[i] <- 1
if(adult$workclass[i]=="Private") adult$wc_priv[i] <- 1
if(adult$marital.status[i]=="Married") adult$ms_marr[i] <- 1
if(adult$marital.status[i]=="Divorced") adult$ms_div[i] <- 1
if(adult$marital.status[i]=="Separated") adult$ms_sep[i] <- 1
if(adult$marital.status[i]=="Widowed") adult$ms_wid[i] <- 1
}
#minimax transform the continuous varibles
adult$age_mm <- (adult$age - min(adult$age))/(max(adult$age)-min(adult$age))
adult$edu.num_mm <- (adult$education.num - min(adult$education.num))/(max(adult$education.num)-min(adult$education.num))
adult$capital.gain_mm <- (adult$capital.gain - min(adult$capital.gain))/(max(adult$capital.gain)-min(adult$capital.gain))
adult$capital.loss_mm <- (adult$capital.loss - min(adult$capital.loss))/(max(adult$capital.loss)-min(adult$capital.loss))
adult$hours.p.w_mm <- (adult$hours.per.week - min(adult$hours.per.week))/(max(adult$hours.per.week)-min(adult$hours.per.week))
newdat <- as.data.frame(adult[,-c(1:15)])
# Run the neural net
library(nnet)
net.dat <- nnet(income_g50K ~ .,data=newdat,size=8)
table(round(net.dat$fitted.values,1)) #if fitted values are all the same, rerun nnet
net.dat$wts #weights
hist(net.dat$wts)
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <-
adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <-
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
View(adult)
del(adult)
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
adult$sex2 <- c(rep(0,length(adult$income)))
View(adult)
rep(0,length(adult$income))
str(adult$sex2)
summary(adult$sex2)
unique(adult$income)
length(adult$income)
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
adult$income_g50K
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <-
adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <-
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
#Create indicator variables
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <- adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <- adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
?rep
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <- adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <- adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,500))
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <- c(rep(0,length(adult$income)))
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
#Create indicator variables
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <- c(rep(0,length(adult$income)))
adult$wc_gov <- adult<-wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <- c(rep(0,length(adult$income)))
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
#Create indicator variables
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <-
adult$wc_gov <- adult$wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <-
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
for (i in 1:length(adult$income)) {
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
if (adult$sex[i]=="Male") adult$sex2[i]<-1
if (adult$race[i]=="White") adult$race_white[i] <- 1
if (adult$race[i]=="Amer-Indian-Eskimo") adult$race_am.in.esk[i]<-1
if (adult$race[i]=="Asian-Pac-Islander") adult$race_ac.pac.is[i] <-1
if(adult$race[i]=="Black") adult$race_black[i] <- 1
if(adult$workclass[i]=="Gov") adult$wc_gov[i] <- 1
if(adult$workclass[i]=="Self") adult$wc_self[i] <- 1
if(adult$workclass[i]=="Private") adult$wc_priv[i] <- 1
if(adult$marital.status[i]=="Married") adult$ms_marr[i] <- 1
if(adult$marital.status[i]=="Divorced") adult$ms_div[i] <- 1
if(adult$marital.status[i]=="Separated") adult$ms_sep[i] <- 1
if(adult$marital.status[i]=="Widowed") adult$ms_wid[i] <- 1
}
for (i in 1:length(adult$income)) {
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
if (adult$sex[i]=="Male") adult$sex2[i]<-1
if (adult$race[i]=="White") adult$race_white[i] <- 1
if (adult$race[i]=="Amer-Indian-Eskimo") adult$race_am.in.esk[i]<-1
if (adult$race[i]=="Asian-Pac-Islander") adult$race_ac.pac.is[i] <-1
if(adult$race[i]=="Black") adult$race_black[i] <- 1
if(adult$workclass[i]=="Gov") adult$wc_gov[i] <- 1
if(adult$workclass[i]=="Self") adult$wc_self[i] <- 1
if(adult$workclass[i]=="Private") adult$wc_priv[i] <- 1
if(adult$marital.status[i]=="Married") adult$ms_marr[i] <- 1
if(adult$marital.status[i]=="Divorced") adult$ms_div[i] <- 1
if(adult$marital.status[i]=="Separated") adult$ms_sep[i] <- 1
if(adult$marital.status[i]=="Widowed") adult$ms_wid[i] <- 1
}
View(adult$race)
for (i in 1:length(adult$income)) {  if (adult$race[i]=="Asian-Pac-Islander") adult$race_ac.pac.is[i] <-1
}
str(adult$race)
table(adult$race)
for (i in 1:500) {  if (adult$race[i]=="Asian-Pac-Islander") adult$race_ac.pac.is[i] <-1}
summary(adult$race)
summary(adult$race_as.pac.is)
str(adult$race_as.pac.is)
for (i in 1:500) {  if (adult$race[i]=="Asian-Pac-Islander") a<-1}
View(a)
for (i in 1:500) {  if (adult$race[i]=="Asian-Pac-Islander") a[i]<-1}
summary(a)
str(a)
for (i in 1:500) {  if (adult$race[i]=="Asian-Pac-Islander") adult$race_as.pac.is[i]<-1}
for (i in 1:length(adult$income)) {
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
if (adult$sex[i]=="Male") adult$sex2[i]<-1
if (adult$race[i]=="White") adult$race_white[i] <- 1
if (adult$race[i]=="Amer-Indian-Eskimo") adult$race_am.in.esk[i]<-1
if (adult$race[i]=="Asian-Pac-Islander") adult$race_as.pac.is[i]<-1
if(adult$race[i]=="Black") adult$race_black[i] <- 1
if(adult$workclass[i]=="Gov") adult$wc_gov[i] <- 1
if(adult$workclass[i]=="Self") adult$wc_self[i] <- 1
if(adult$workclass[i]=="Private") adult$wc_priv[i] <- 1
if(adult$marital.status[i]=="Married") adult$ms_marr[i] <- 1
if(adult$marital.status[i]=="Divorced") adult$ms_div[i] <- 1
if(adult$marital.status[i]=="Separated") adult$ms_sep[i] <- 1
if(adult$marital.status[i]=="Widowed") adult$ms_wid[i] <- 1
}
adult <- read.csv("~/Downloads/Clem3Training",stringsAsFactors=TRUE)
#Collpase some of the categories by giving them the same factor label
adult <- adult[1:500,] #we only work with a small sample of data
unique(adult$income) #One variable for income
unique(adult$sex)
unique(adult$race)
unique(adult$workclass)
unique(adult$marital.status)
#Create indicator variables
adult$race_white <- adult$race_black <- adult$race_as.pac.is <- adult$race_am.in.esk <-
adult$wc_gov <- adult$wc_self <- adult$wc_priv <- adult$ms_marr <- adult$ms_div <-
adult$ms_sep <- adult$ms_wid <- adult$income_g50K <- adult$sex2 <- c(rep(0,length(adult$income)))
for (i in 1:length(adult$income)) {
if (adult$income[i]==">50K.") adult$income_g50K[i]<-1
if (adult$sex[i]=="Male") adult$sex2[i]<-1
if (adult$race[i]=="White") adult$race_white[i] <- 1
if (adult$race[i]=="Amer-Indian-Eskimo") adult$race_am.in.esk[i]<-1
if (adult$race[i]=="Asian-Pac-Islander") adult$race_as.pac.is[i]<-1
if(adult$race[i]=="Black") adult$race_black[i] <- 1
if(adult$workclass[i]=="Gov") adult$wc_gov[i] <- 1
if(adult$workclass[i]=="Self") adult$wc_self[i] <- 1
if(adult$workclass[i]=="Private") adult$wc_priv[i] <- 1
if(adult$marital.status[i]=="Married") adult$ms_marr[i] <- 1
if(adult$marital.status[i]=="Divorced") adult$ms_div[i] <- 1
if(adult$marital.status[i]=="Separated") adult$ms_sep[i] <- 1
if(adult$marital.status[i]=="Widowed") adult$ms_wid[i] <- 1
}
del(a)
rm(a)
adult$age_mm <- (adult$age - min(adult$age))/(max(adult$age)-min(adult$age))
adult$edu.num_mm <- (adult$education.num - min(adult$education.num))/(max(adult$education.num)-min(adult$education.num))
adult$capital.gain_mm <- (adult$capital.gain - min(adult$capital.gain))/(max(adult$capital.gain)-min(adult$capital.gain))
adult$capital.loss_mm <- (adult$capital.loss - min(adult$capital.loss))/(max(adult$capital.loss)-min(adult$capital.loss))
adult$hours.p.w_mm <- (adult$hours.per.week - min(adult$hours.per.week))/(max(adult$hours.per.week)-min(adult$hours.per.week))
newdat <- as.data.frame(adult[,-c(1:15)])
# Run the neural net
library(nnet)
net.dat <- nnet(income_g50K ~ .,data=newdat,size=8)
table(round(net.dat$fitted.values,1)) #if fitted values are all the same, rerun nnet
net.dat$wts #weights
hist(net.dat$wts)
hist(net.dat$wts)
table(round(net.dat$fitted.values,1)) #if fitted values are all the same, rerun nnet
net.dat$wts #weights
summary(net.dat)
View(net.dat)
str(net.data)
str(net.dat)
?ppredict
?predict
net.pred<-predict(net.dat,newdata=newdat)
table(net.pred)
table(adut$income_g50K,net.pred)
table(adult$income_g50K,net.pred)
risk <- read.csv("~/Downloads/ClassifyRisk")
View(risk)
#Create the data set using Table 10.3
new <- c(0.05,0.25)
A <- c(0.0467,0.2471)
B <- c(0.0533,0.1912)
C <- c(0.0917,02794)
data <- rbind(A,B,C)
dimnames(data)<- list(c("Dark","Medium","Light"),c("Age (MMMN))","Na/K (MMN)"))
# Declare true classifications of A, B, and C
trueclass <- c("Dark","Medium","Light")
# Run KNN
# Requires package "class"
library(class)
knn <- knn(data,new,cl=trueclass,k=3,prob=TRUE)
knn
# Calculate the Euclidean distance
library(fields)
together <- rbind(new,data)
rdist(together)
#Stretch the ães
ds_newA<-sqrt((new[1]-A[1])^2+(3*(new[2]-A[2]))^2)
ds_newB<-sqrt((new[1]-B[1])^2+(3*(new[2]-B[2]))^2)
ds_newC<-sqrt((new[1]-C[1])^2+(3*(new[2]-C[2]))^2)
distance <- c(ds_newA,ds_newB,ds_newC)
BP <- c(120,122,130)
data <- cbind(BP,data,distance)
#Locally weighted averaging
weights <- (1/(distance^2))
sum_wi <- sum(weights)
sum_wiyi <- sum(weights*data[,1])
yhat_new<-sum_wiyi/sum_wi
yhat_new
#Read in the Classify risk dataset
risk <- read.csv("~/Downloads/ClassifyRisk")
risk2 <- risk[c(51,65,79,87,124,141,150,162),c(5,1,4,6)]
risk2$married.I <- ifelse(risk2$marital_status=="married",1,0)
risk2$single.I <- ifelse(risk2$marital_status=="single",1,0)
risk2 <- risk2[,-2]; new2 <- risk[163,c(5,1,4)]
new2$married.I <- 1; new2$single.I <-0
new2 <-new2[,-2]; cll <-c(risk2[,3])
knn2 <- knn(train=risk2[,c(1,2,4,5)], test=new2,cl=cll,k=3)
risk2[,c(1,2,4,5)]
new2
cll
knn2 <- knn(train=risk2[,c(1,2,4,5)], test=new2,cl=cll,k=3)
?knn
View(risk2)
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2,cl=cll,k=3)
risk <- read.csv("~/Downloads/ClassifyRisk")
risk2 <- risk[c(51,65,79,87,124,141,150,162),c(5,1,4,6)]
risk2
risk2 <- risk2[,-2]; new2 <- risk[163,c(5,1,4)]
risk2
knn2 <- knn(train=risk2[,c(1,2,4,5)], test=new2,cl=cll,k=3)
risk2 <- risk[c(51,65,79,87,124,141,150,162),c(5,1,4,6)]
risk2$married.I <- ifelse(risk2$marital_status=="married",1,0)
risk2$single.I <- ifelse(risk2$marital_status=="single",1,0)
risk2 <- risk2[,-2]; new2 <- risk[163,c(5,1,4)]
new2$married.I <- 1; new2$single.I <-0
new2 <-new2[,-2]; cll <-c(risk2[,3])
knn2 <- knn(train=risk2[,c(1,2,4,5)], test=new2,cl=cll,k=3)
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,4,5)],cl=cll,k=3)
risk2 <- risk2[,-2]
new2 <- risk[163,c(5,1,4)]
new2$married.I <- 1; new2$single.I <-0
new2 <-new2[,-2]; cll <-c(risk2[,3])
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,4,5)],cl=cll,k=3)
risk2[,c(1,4,5)]
risk2[,c(1,2,4,5)]
risk2
risk2 <- risk[c(51,65,79,87,124,141,150,162),c(5,1,4,6)]
risk2$married.I <- ifelse(risk2$marital_status=="married",1,0)
risk2$single.I <- ifelse(risk2$marital_status=="single",1,0)
risk2 <- risk2[,-2]
new2 <- risk[163,c(5,1,4)]
new2$married.I <- 1; new2$single.I <-0
new2 <-new2[,-2]; cll <-c(risk2[,3])
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,4,5)],cl=cll,k=3)
risk2[,c(1,2,4,5)]
risk2[,c(1,4,5)]
new2[,c(1,4,5)]
new2
new2[,c(1,4,5)]
str(risk2)
str(new)
str(new2)
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,3,4)],cl=cll,k=3)
summary(knn2)
knn2
knn2 <- knn(train=risk2[,c(1,4,5)],cl=cll,k=3)
knn2 <- knn(train=risk2[,c(1,4,5)],test=NA,cl=cll,k=3)
knn2 <- knn(train=risk2[,c(1,4,5)],test=NA,cl=cll,k=3)
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,3,4)],cl=cll,k=3)
knn2
knn2 <- knn(train=risk2[,c(1,4,5)], test=risk2[,c(1,4,5)],cl=cll,k=3)
knn2
View(risk2)
View(risk2)
#Create the data set using Table 10.3
new <- c(0.05,0.25)
A <- c(0.0467,0.2471)
B <- c(0.0533,0.1912)
C <- c(0.0917,02794)
data <- rbind(A,B,C)
dimnames(data)<- list(c("Dark","Medium","Light"),c("Age (MMMN))","Na/K (MMN)"))
# Declare true classifications of A, B, and C
trueclass <- c("Dark","Medium","Light")
# Run KNN
# Requires package "class"
library(class)
knn <- knn(data,new,cl=trueclass,k=3,prob=TRUE)
knn
# Calculate the Euclidean distance
library(fields)
together <- rbind(new,data)
rdist(together)
#Stretch the ães
ds_newA<-sqrt((new[1]-A[1])^2+(3*(new[2]-A[2]))^2)
ds_newB<-sqrt((new[1]-B[1])^2+(3*(new[2]-B[2]))^2)
ds_newC<-sqrt((new[1]-C[1])^2+(3*(new[2]-C[2]))^2)
distance <- c(ds_newA,ds_newB,ds_newC)
BP <- c(120,122,130)
data <- cbind(BP,data,distance)
#Locally weighted averaging
weights <- (1/(distance^2))
sum_wi <- sum(weights)
sum_wiyi <- sum(weights*data[,1])
yhat_new<-sum_wiyi/sum_wi
yhat_new
#Read in the Classify risk dataset
risk <- read.csv("~/Downloads/ClassifyRisk")
risk2 <- risk[c(51,65,79,87,124,141,150,162),c(5,1,4,6)]
risk2$married.I <- ifelse(risk2$marital_status=="married",1,0)
risk2$single.I <- ifelse(risk2$marital_status=="single",1,0)
risk2 <- risk2[,-2]
new2 <- risk[163,c(5,1,4)]
new2$married.I <- 1; new2$single.I <-0
new2 <-new2[,-2]; cll <-c(risk2[,3])
knn2 <- knn(train=risk2[,c(1,4,5)], test=new2[,c(1,3,4)],cl=cll,k=3) #testing set
knn1 <- knn(train=risk2[,c(1,4,5)], test=risk2[,c(1,4,5)],cl=cll,k=3) #traning set
install.packages("rJava")
all_power$Datetime<-strptime(paste(all_power$Date,all_power$Time),"%d/%m/%Y %H:%M:%S")
defaultWD <- "//Users/gamelord/Documents/OneDrive/Coursera.org/4. Exploratory Data/ExData_Plotting1/"
setwd(defaultWD)
all_power <- read.table("./data/household_power_consumption.txt",sep=";",comment.char="", header=TRUE)
all_power$Datetime<-strptime(paste(all_power$Date,all_power$Time),"%d/%m/%Y %H:%M:%S")
all_power$Date2 <- as.Date(all_power$Date,"%d/%m/%Y")
#Using only 2 dates
power_consumption<-all_power[c(which(all_power$Date2=="2007-02-01"),which(all_power$Date2=="2007-02-02")),2:11]
power_consumption$Global_active_power <- as.numeric(as.character(power_consumption$Global_active_power))
power_consumption$Sub_metering_1 <- as.numeric(as.character(power_consumption$Sub_metering_1))
power_consumption$Sub_metering_2 <- as.numeric(as.character(power_consumption$Sub_metering_2))
power_consumption$Sub_metering_3 <- as.numeric(as.character(power_consumption$Sub_metering_3))
#Plot 3 starts from here
xrange <- range(power_consumption$Datetime)
yrange <- range(power_consumption$Sub_metering_1)
#set up the plot
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
legend(xrange[3],yrange[2],c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
legend(xrange[2],yrange[2],c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
dev.off()
png('plot3.png',width=480,height=480)
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
#add a legend
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
dev.off()
?par
par(mfrow=c(2,2))
plot(power_consumption$Global_active_power,ylab="Global Active Power (kilowatts)",type = "l",xaxt="n")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(power_consumption$Global_active_power,ylab="Global Active Power",type = "l",xaxt="n",xlab="")
dev.off()
power_consumption$Voltage <- as.numeric(as.character(power_consumption$Voltage))
par(mfrow=c(2,2))
plot(power_consumption$Global_active_power,ylab="Global Active Power",type = "l",xaxt="n",xlab="")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(power_consumption$Voltage,ylab="Voltage",type = "l",xaxt="n",xlab="datetime")
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
#add a legend
?legend
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,bty='n',lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
power_consumption$Global_reactive_power <- as.numeric(as.character(power_consumption$Global_reactive_power))
dev.off()
par(mfrow=c(2,2))
plot(power_consumption$Global_active_power,ylab="Global Active Power",type = "l",xaxt="n",xlab="")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(power_consumption$Voltage,ylab="Voltage",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
#add a legend
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,bty='n',lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
plot(power_consumption$Global_reactive_power,ylab="Global_reactive_power",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
dev.off()
par(mfrow=c(2,2))
plot(power_consumption$Global_active_power,ylab="Global Active Power",type = "l",xaxt="n",xlab="")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(power_consumption$Voltage,ylab="Voltage",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
#add a legend
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,bty='n',lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
plot(power_consumption$Global_reactive_power,ylab="Global_reactive_power",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
png('plot4.png',width=480,height=480)
par(mfrow=c(2,2))
plot(power_consumption$Global_active_power,ylab="Global Active Power",type = "l",xaxt="n",xlab="")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(power_consumption$Voltage,ylab="Voltage",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
plot(xrange, yrange, type="n", ylab="Energy sub metering", xlab = "")
lines(power_consumption$Datetime,power_consumption$Sub_metering_1,type="l")
lines(power_consumption$Datetime,power_consumption$Sub_metering_2,type="l",col="red")
lines(power_consumption$Datetime,power_consumption$Sub_metering_3,type="l",col="blue")
#add a legend
legend("topright",c("Sub_metering_1","Sub_metering_2","Sub_metering_3")
,bty='n',lty=c(1,1),lwd=c(2.5,2.5),col=c("grey","red","blue"))
plot(power_consumption$Global_reactive_power,ylab="Global_reactive_power",type = "l",xaxt="n",xlab="datetime")
axis(1,at=seq(0,2880,by=1440),lab=c("Thu","Fri","Sat"))
dev.off()
